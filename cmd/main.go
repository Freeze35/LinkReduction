package main

import (
	"LinkReduction/handler"
	"context"
	"github.com/gofiber/fiber/v2"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
)

//TIP <p>To run your code, right-click the code and select <b>Run</b>.</p> <p>Alternatively, click
// the <icon src="AllIcons.Actions.Execute"/> icon in the gutter and select the <b>Run</b> menu item from here.</p>

func main() {
	app := fiber.New()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	h := handler.NewHandler()
	h.InitRoutes(app)

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (Ctrl+C, Docker stop –∏ —Ç.–ø.)
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := app.Listen(":8080"); err != nil {
			log.Printf("Fiber server stopped: %v", err)
		}
	}()

	log.Println("üöÄ Server started on http://localhost:8080")

	// –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫, –æ–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-quit
	log.Println("Gracefully shutting down...")

	// –¢–∞–π–º–∞—É—Ç –¥–ª—è graceful shutdown
	_, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º Fiber —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if err := app.Shutdown(); err != nil {
		log.Fatalf("‚ùå Server shutdown failed: %v", err)
	}

	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã:

	log.Println("‚úÖ Server exited properly")
}
